
Generics and Arrays:

  Generics and arrays do not mix.
  The only thing you can do that combines generic types and arrays is to declare an array to hold a generic.  For example:
	T[] array;

  You cannot create a generic array (new T[10]) nor can you create an array of a parameterized type (new LinkedList<String>[10]).
  The reason is because arrays can be automatically widened to Object[].  For normal arrays such as:
	Object[] array = new String[10];
  Java adds code that verifies every assignment to a entry in an array to make sure that the type being assigned matches the "true type" of the array.  That is why "array[0] = new JFrame()" will compile but will throw an exception when run.
  On the other hand, the generic information is only used by the compiler, and that prevents a similar type check from being done on an array created with a generic or an array of a parameterized type.


  What can you do with array declarations and generics?  Well consider this method header:
	public static <T> void insert(T element, T[] array) {
   it makes sure that the element and the type stored in the array are the same non-primitive type.



Introduction to JavaFX

  JavaFX is the third iteration of a Graphical User Interface (GUI) library for Java.
    The first was Java AWT.  It was released almost as soon as Java was.  Java AWT is for computer desktop GUI's only.
    The second was Java Swing.  It was built on top of Java AWT and simplified a lot of the Java AWT routines. 
      Just like Java AWT, Java Swing is for computer desktop GUI's only.
    The third is JavaFX.  JavaFX is completely separate from Java Swing and Java AWT.  As a result, it uses its own API that is
      separate from the regular Java API.
      It was designed to allow a GUI to be built that can work both on the desktop and on a web page.
      JavaFX comes standard with Java 8, but with newer versions of Java, JavaFX is separate from the Java JDK and must be downloaded if you want to use it.

   To create a JavaFX application, you need to extend the abstract class javafx.application.Application.  
     For now there are four important methods of the class you will use, but two you can ignore.
        The init() method is used to initialize your GUI, but you should not build the graphical part of the GUI here.
           The init method acts like your constructor for the class, but because of how JavaFX works, you should put your initialization code here and not in the constructor.
           Generally, the default init we inherit is good enough.

        The start(Stage primaryStage) method is an abstract method that your class must override.  The method should contain all the code to build and display your GUI.

        The stop() method contains code that you want to run when the user exits the GUI.  Usually the default will be good enough for us.

        The launch(String... args) method is a static method that runs the GUI.  When you run launch, it runs the init() method first and then the start() method.
            There is one catch to the start method.
            Notice that the launch method is static while the start method is not static.  Usually this means that we have to create an instance of the Application class to run the start method.
            However, JavaFX will do this for us automatically when the launch method is run.
            How does Java know what true type instance to create?  Java uses something called "reflection" to find the correct instance to create and then runs it's start method.
            We will learn about reflection later in the course, but but what that means for us now is that the code to run the launch method must be *inside* the body of our JavaFX class that extends Application.

            You can place launch anywhere inside the class, but the typical thing to do is to place it in the main method for the class.


   JavaFX uses theater terminology.
     The start method takes a "Stage" as input.  A stage is basically a window.
     Inside the start method, we will create a "Scene" that we place on the "Stage".  The "Scene" contains what our GUI displays.
     Once the "Stage" is ready, we "show" it.

     The "Scene" can contain any JavaFX gadget.  
     In lecture, we just placed a button on the scene.  
     Usually, we will place a "layout manager" on the scene.  The layout mananger dictates how the different GUI gadgets are arranged on the screen.
      And we then place the GUI gadgets into the layout manager.
  

	public class MyFirstGUI extends Application {
  
	  public void start(Stage primaryStage) {
	    Scene scene = new Scene(new Button("Click me"));  
	    primaryStage.setScene(scene);                 
	    primaryStage.setTitle("My GUI");             
	    primaryStage.show();                        
	  }
  
	  public static void main(String[] args) {
	    Application.launch(args);
	  }
	}

   A couple issues with JavaFX:
     1) JavaFX uses the threads of your computer.  We will discuss that later, but what that means for us now is that when you
      run the JavaFX application, it takes over your interactions pane.  You will no longer be able to enter anything in the pane.
      If you need to debug a JavaFX application, the best way is with the debugger.

     2) JavaFX uses a "static initializer" to set up the GUI.  A static initializer is like a constructor, but for classes instead of for instances.
       We will discuss this later, but for now what it means is that you can't create an instance of a JavaFX gadget (like a button)
       in the interactions pane unless you first launch the application.

     3) Because JavaFX uses a "static initializer" to set up the GUI, once you run the application, you can't relaunch it unless you reset the interactions pane.

