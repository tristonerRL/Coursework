A review of Nested and Anonymous classes
	Static nested classes: used the same as "normal" classes except they are located inside another class.
		- these classes have access to all the static elements of the containing class.

	Non-static nested classes:
		- you must create an instance of the containing class before you can create an instance of the nested class.
		- these classes have access to all the static and non-static elements of the containing class.
		- there are two "this" values in the instance methods of the nested class.  One for the nested class instance and one for the containing class instance.
		- there is the different way of creating objects using new when outside of the containing class.

	Local classes (included for completion):
		- created in a method
		- can have access to all the fields and local variables available to the code where the class is created.
		- any local variable accessed by the class must be final so that the variable can be moved off of the stack
		- there can be two "this" values in the body of an local class (assuming it was created inside a non-static method body

	Anonymous classes:
		- A local class that is created at the same step as the "new" operator.
		

Nested Classes and Generic Types

  When we look at the API for LinkedList, we see no mention of an LLNode class, but there -must- be one to be a linked list!  Why don't we see one?  They must have the LLNode as 
   a private nested class.  In class, we did the same thing in 
	List1:  a linked list with a private static nested class for the nodes
	List2:  a linked list with a private non-static nested class for the nodes.


  Generics and Static Nested Classes:

     Because the nested class is static the nested class -does not- have access to the generic type of the containing class.  (The generic type only applies to instances of the class.)
      Thus, we need to define a generic for the nested class.  Specifically, our nested class Node needs its own generic type declaration.
     As a result, we specify the generic on our Node class as:
	Node<T> node
     or for it's "full name"
	List1.Node<T> node

     To create a member of the nested class Node from outside the List1 class, we can use exactly the same Java terminology we use to create other objects and to
     access static fields and methods:

        List1.Node<String> node = new List1.Node<String>("Hi", null);

     Note that the generic goes on the Node class.  We do not need to specify the generic for List1 because we are not creating an instance of List1.
     (It is not an error to specify the generic for List1, but Java will ignore that generic since no instance is being created.)

  Generics and Non-static Nested Classes

    With a non-static nested class, the nested class -does- have access to the generic of the containing class.  Thus the nested class Node of List2 does not need its own generic.
    Note that in List2, the Nodes no longer have generic specifications and our code is a little cleaner.

    In List2, we left the iterator as a static nested class to demonstrate how we have to now specify the generic on Node.
	In the List2 iterator, we need to make sure the List2's Node's generic matches the generic of the List2Iterator.
	We can't say Node<T> because Node does not take a generic.  The generic goes with the containing class List2.  So, we give Node's full name List2.Node, and we place the generic
         on List2 (the generic is declared in List2's header, not Node's).

	List2<T>.Node node

   In general, non-static nested classes can be more useful because they have access to all the non-static fields and method of the containing class, but they
    can be a little trickier to use.

    To create a member of the nested class Node from outside the List2 clas, we do something similar as with the non-static nested class, but now we must create
    an instance of the outer class first.  Note the difference with the new operator and note that we now specify the generic with the outer class:

        List2<String> list = new List2<String>();
        List2<String>.Node node = list.new Node("Hi", null);




A Java 8 Shortcut for When Using Generic Types

	In Java 8, you can drop the generic type specification in (most) places where you create an object.
	For example:
		new LLNode<Double>(3.5, null)
	can be written as:
		new LLNode<>(3.5, null)

	Java will notice that the 3.5 is type double, and thus the likely type of the generic is Double.
	Please note, this will cause a problem if you do want Double as the generic, and you have 
		new LLNode<>(3, null)
	because the type of 3 is int, and so Java will assume the generic type is Integer and not Double.
	In this case, you should use the full
		new LLNode<Double>(3, null)


	Similarly, we can shorten:
		LinkedList<String> list = new LinkedList<String>()
	to
		LinkedList<String> list = new LinkedList<>()
	
	In this case, Java sees that we are assigning the new object to a variable with the generic specified as String.  Since generics have to match exactly,
	there is only one possible value for the generic of the new, and that is String.  Thus, we can drop the generic here.

	Note: This shortcut only works with the generic used with new.

	You still have to provide the <>.  
        This is incorrect:
	   LinkedList<String> list = new LinkedList();
           --  it is still a mistake because by not including <> you are not specifying a generic (and thus not typechecking).

